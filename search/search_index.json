{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open Data Framework","text":"<p>Open source, full stack data framework.</p>"},{"location":"#installation","title":"Installation","text":"pip install opendataframeworkInstalled"},{"location":"#create-data-folder","title":"Create data folder","text":"<p>Name (required): <code>data</code></p> mkdir data"},{"location":"#create-data-file","title":"Create data file","text":"<p>Name (can be any): <code>events.csv</code></p>"},{"location":"#types-supported","title":"Types supported","text":"<p>int, float, str, datetime</p> id name value logged_at 1 noname 0.1 2024-01-01 00:00:00 cat &gt; data/events.csv &lt;&lt; EOFid,name,value,logged_at1,noname,0.1,2024-01-01 00:00:00EOFtree.\u2514\u2500\u2500 data    \u2514\u2500\u2500 events.csv"},{"location":"#init","title":"Init","text":"<p>Name (can be any): <code>myproject</code></p> opendataframework init myproject --profile research./myproject/settings.json createdtree.\u251c\u2500\u2500 data\u2502   \u2514\u2500\u2500 events.csv\u2514\u2500\u2500 myproject    \u251c\u2500\u2500 data    \u2502   \u2514\u2500\u2500 events.csv    \u2514\u2500\u2500 settings.json"},{"location":"#settingsjson","title":"settings.json","text":"cat myproject/settings.json{  \"opendataframework\": \"0.0.4\",  \"project\": \"myproject\",  \"profile\": \"research\",  \"layout\": \"research\",  \"entities\": {    \"events\": {      \"name\": \"event\",      \"description\": \"events research\",      \"fields\": {        \"id\": \"int\",        \"name\": \"str\",        \"value\": \"float\",        \"logged_at\": \"datetime|%Y-%m-%d %H:%M:%S\"      },      \"layers\": {        \"devcontainers\": {          \"R\": {}        },        \"utility\": {          \"texlive\": {}        }      }    }  },  \"mounts\": {    \"R\": {      \"workspaceMount\": \"source=${localWorkspaceFolder},target=/myproject,type=bind\",      \"workspaceFolder\": \"/myproject\",      \"mounts\": [        \"source=${localWorkspaceFolder}/../../../data,target=/myproject/data,type=bind,consistency=cached\"      ]    }  },  \"volumes\": {    \"texlive\": {      \"../output\": \"/usr/src/app/mnt/output\",      \"../paper\": \"/usr/src/app/mnt/paper\"    }  },  \"ports\": {}}"},{"location":"#create","title":"Create","text":"opendataframework create myprojectevents.csv moved to./myproject/data/raw/events.csvmyproject: research layout created./myproject/platform/devcontainers/R created./myproject/platform/utility/texlive createdtree.\u251c\u2500\u2500 data\u2502   \u2514\u2500\u2500 events.csv\u2514\u2500\u2500 myproject    \u251c\u2500\u2500 README.md    \u251c\u2500\u2500 code    \u2502   \u251c\u2500\u2500 build    \u2502   \u251c\u2500\u2500 check    \u2502   \u251c\u2500\u2500 learn    \u2502   \u2514\u2500\u2500 share    \u251c\u2500\u2500 data    \u2502   \u251c\u2500\u2500 derived    \u2502   \u2514\u2500\u2500 raw    \u2502       \u2514\u2500\u2500 events.csv    \u251c\u2500\u2500 expectations.py    \u251c\u2500\u2500 libraries    \u251c\u2500\u2500 logs    \u251c\u2500\u2500 models    \u251c\u2500\u2500 output    \u2502   \u251c\u2500\u2500 figures    \u2502   \u2514\u2500\u2500 tables    \u251c\u2500\u2500 paper    \u251c\u2500\u2500 platform    \u2502   \u251c\u2500\u2500 devcontainers    \u2502   \u2502   \u2514\u2500\u2500 R    \u2502   \u251c\u2500\u2500 docker-compose.yaml    \u2502   \u251c\u2500\u2500 setup.sh    \u2502   \u2514\u2500\u2500 utility    \u2502       \u2514\u2500\u2500 texlive    \u2502           \u251c\u2500\u2500 Dockerfile    \u2502           \u2514\u2500\u2500 mnt    \u251c\u2500\u2500 requirements.txt    \u2514\u2500\u2500 settings.json"},{"location":"#build-platform","title":"Build platform","text":"<p>Command builds platform's images.</p> opendataframework build --project myproject"},{"location":"#start-platform","title":"Start platform","text":"<p>Command starts platform's containers.</p> opendataframework start --project myproject"},{"location":"#setup-platform","title":"Setup platform","text":"<p>Command setup platform's containers.</p> opendataframework setup --project myproject"},{"location":"#install-dependencies","title":"Install dependencies","text":"<p>Command creates <code>myproject/.venv/</code> and installs dependencies from <code>requirements.txt</code>.</p> opendataframework install --project myproject"},{"location":"#build-from-the-source","title":"Build from the source","text":"<ol> <li>This package requires poetry to be installed in your system first. <p>Optional: Set virtualenvs.in-project to <code>true</code> by running <code>poetry config virtualenvs.in-project true</code> to create <code>.venv</code> inside project's folder.</p> </li> <li>Clone opendataframework.</li> <li>Install <code>opendataframework</code> in editable mode with dependencies by running: <code>poetry install</code>.</li> </ol>"},{"location":"#concepts","title":"Concepts","text":""},{"location":"#layout","title":"Layout","text":"<p>Predefined project layout and scripts to get up &amp; running.</p>"},{"location":"#research","title":"Research","text":"<pre><code>.\n\u251c\u2500\u2500 code\n\u2502   \u251c\u2500\u2500 build\n\u2502   \u251c\u2500\u2500 check\n\u2502   \u251c\u2500\u2500 learn\n\u2502   \u2514\u2500\u2500 share\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 derived\n\u2502   \u2514\u2500\u2500 raw\n\u251c\u2500\u2500 libraries\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 models\n\u251c\u2500\u2500 output\n\u2502   \u251c\u2500\u2500 figures\n\u2502   \u2514\u2500\u2500 tables\n\u2514\u2500\u2500 paper\n</code></pre>"},{"location":"#custom","title":"Custom","text":"<p>No Layout (default)</p>"},{"location":"#platform","title":"Platform","text":"<p>Data platform. Set of pre-configured, open source, containerized tools used in project, hosted locally or deployed.</p>"},{"location":"#layers-components","title":"Layers &amp; Components","text":"<p>Layers of data platform with containerized components.</p>"},{"location":"#analytics","title":"analytics","text":""},{"location":"#superset","title":"superset","text":""},{"location":"#api","title":"api","text":""},{"location":"#fastapi","title":"fastapi","text":""},{"location":"#devcontainers","title":"devcontainers","text":""},{"location":"#python","title":"python","text":""},{"location":"#r","title":"R","text":""},{"location":"#storage","title":"storage","text":""},{"location":"#postgresql","title":"postgresql","text":""},{"location":"#utility","title":"utility","text":""},{"location":"#nginx","title":"nginx","text":""},{"location":"#tex-live","title":"TeX Live","text":""},{"location":"#profile","title":"Profile","text":"<p>Pre-configured layout &amp; data platform.</p>"},{"location":"#research_1","title":"Research","text":"<p>Configuration for <code>Research</code> project.</p>"},{"location":"#custom_1","title":"Custom","text":"<p>Manual configuration via CLI.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#inference-api","title":"Inference API","text":"<p>We need 3 files in order to make predictions via API</p> <ol> <li><code>data file</code> (<code>wines.csv</code>) is needed to prepare schema for <code>Inference API</code></li> <li><code>model file</code> (<code>model.pkl</code>) is needed to make a prediction via <code>Inference API</code></li> <li><code>requirements.txt</code> is needed to install extra dependencies needed for our model (for example <code>scikit-learn</code>)</li> </ol>"},{"location":"#create-data-folder_1","title":"Create data folder","text":"<p>Name (required): <code>data</code></p> mkdir datatree.\u2514\u2500\u2500 data"},{"location":"#create-data-file_1","title":"Create data file","text":"<p>Assume, we have a <code>model</code> and it was <code>trained</code> and <code>fit</code> using the dataset</p> <p><code>quality</code> is a column we want to predict</p> <p>Now, lets create a <code>data file</code></p> <ul> <li><code>data file</code> can be used for prediction</li> <li>inference endpoint will be generated based on <code>data file</code> schema</li> </ul> <p>Name (can be any): <code>wines.csv</code></p> <p>File should contain column names used to <code>fit</code> the model</p> <p>Column used to <code>train</code> the model, but not to <code>fit</code> the model (<code>quality</code>), will be predicted by inference endpoint</p> <p>Note: column types supported are <code>int</code>, <code>float</code>, <code>str</code>, <code>datetime</code></p> cat &gt; data/wines.csv &lt;&lt; EOF\"fixed acidity\",\"volatile acidity\",\"citric acid\",\"residual sugar\",\"chlorides\",\"free sulfur dioxide\",\"total sulfur dioxide\",\"density\",\"pH\",\"sulphates\",\"alcohol\"7.1,0.33,0.18,6.3,0.094,27,166,0.99474,2.9,0.49,9.5EOFtree.\u2514\u2500\u2500 data    \u2514\u2500\u2500 wines.csv <p><code>wines.csv</code></p> fixed_acidity volatile_acidity citric_acid residual_sugar chlorides free_sulfur_dioxide density ph sulphates alcohol 7.1 0.33 0.5 6.3 0.094 27 166 0.99474 0.49 9.5"},{"location":"#create-models-folder","title":"Create models folder","text":"<p>Name (required): <code>models</code> Model folder (must correspond to the <code>data file name</code>): <code>wines</code></p> mkdir -p models/winestree.\u251c\u2500\u2500 data\u2502   \u2514\u2500\u2500 wines.csv\u2514\u2500\u2500 models    \u2514\u2500\u2500 wines"},{"location":"#create-model-file","title":"Create model file","text":"<p>Add a model file into correspondent folder.</p> <p>Name (required): <code>model.pkl</code></p> tree.\u251c\u2500\u2500 data\u2502   \u2514\u2500\u2500 wines.csv\u2514\u2500\u2500 models    \u2514\u2500\u2500 wines        \u2514\u2500\u2500 model.pkl"},{"location":"#add-dependencies","title":"Add dependencies","text":"<p>Dependencies are the packages required for our model to be able to work.</p> <p>Assume our model requires <code>scikit-learn==1.5.2</code> <pre><code>$ cat &gt; models/wines/requirements.txt &lt;&lt; EOF\nscikit-learn==1.5.2\nEOF\n\n$ tree\n.\n\u251c\u2500\u2500 data\n\u2502   \u2514\u2500\u2500 wines.csv\n\u2514\u2500\u2500 models\n    \u2514\u2500\u2500 wines\n        \u251c\u2500\u2500 model.pkl\n        \u2514\u2500\u2500 requirements.txt\n</code></pre></p>"},{"location":"#init-project","title":"Init project","text":"<p>Name (can be any): <code>myproject</code></p> opendataframework init myproject <p>Now, lets do manual configuration of <code>myproject</code>.</p> <p>The only components we need to select are:</p> <p><code>inference</code> (required)</p> <p><code>nginx</code> (optional) - to make a simple static UI for our app where we can easily find the link to Inference API</p> - Layout (custom): custom- Name (wine): wine- Plural (wines): wines- Description: wine quality prediction  wine | analytics  superset: n  wine | devcontainers  python: n  R: n  wine | api  api-postgres: n  inference: y  wine | storage  postgres: n  wine | utility  nginx: y  texlive: n <p>What happened?</p> <ol> <li> <p>Required folders were copied to <code>myproject</code> folder</p> </li> <li> <p>Configuration file <code>myproject/setting.json</code> was created</p> </li> </ol> tree.\u251c\u2500\u2500 data\u2502   \u2514\u2500\u2500 wines.csv\u251c\u2500\u2500 models\u2502   \u2514\u2500\u2500 wines\u2502       \u251c\u2500\u2500 model.pkl\u2502       \u2514\u2500\u2500 requirements.txt\u2514\u2500\u2500 myproject    \u251c\u2500\u2500 data    \u2502   \u2514\u2500\u2500 wines.csv    \u251c\u2500\u2500 models    \u2502   \u2514\u2500\u2500 wines    \u2502       \u251c\u2500\u2500 model.pkl    \u2502       \u2514\u2500\u2500 requirements.txt    \u2514\u2500\u2500 settings.json"},{"location":"#create-project","title":"Create project","text":"<p>Since we are going to use defult cofiguration defined in <code>myproject/setting.json</code> lets go ahead and create the project.</p> opendataframework create myproject <p>Now, lets switch to <code>myproject</code> folder and look what is inside.</p> cd myprojecttree.\u251c\u2500\u2500 README.md\u251c\u2500\u2500 data\u2502   \u2514\u2500\u2500 wines.csv\u251c\u2500\u2500 docs\u2502   \u251c\u2500\u2500 index.md\u2502   \u2514\u2500\u2500 stylesheets\u2502       \u2514\u2500\u2500 extra.css\u251c\u2500\u2500 expectations.py\u251c\u2500\u2500 ingest.py\u251c\u2500\u2500 mkdocs.yml\u251c\u2500\u2500 models\u2502   \u2514\u2500\u2500 wines\u2502       \u251c\u2500\u2500 model.pkl\u2502       \u2514\u2500\u2500 requirements.txt\u251c\u2500\u2500 platform\u2502   \u251c\u2500\u2500 api\u2502   \u2502   \u2514\u2500\u2500 inference\u2502   \u2502       \u2514\u2500\u2500 wines\u2502   \u2502           \u251c\u2500\u2500 Dockerfile\u2502   \u2502           \u251c\u2500\u2500 app\u2502   \u2502           \u2502   \u251c\u2500\u2500 __init__.py\u2502   \u2502           \u2502   \u251c\u2500\u2500 config.py\u2502   \u2502           \u2502   \u251c\u2500\u2500 crud.py\u2502   \u2502           \u2502   \u251c\u2500\u2500 dependencies.py\u2502   \u2502           \u2502   \u251c\u2500\u2500 main.py\u2502   \u2502           \u2502   \u251c\u2500\u2500 model.pkl\u2502   \u2502           \u2502   \u251c\u2500\u2500 models.py\u2502   \u2502           \u2502   \u2514\u2500\u2500 router.py\u2502   \u2502           \u2514\u2500\u2500 pyproject.toml\u2502   \u251c\u2500\u2500 docker-compose.yaml\u2502   \u251c\u2500\u2500 setup.sh\u2502   \u2514\u2500\u2500 utility\u2502       \u2514\u2500\u2500 nginx\u2502           \u251c\u2500\u2500 Dockerfile\u2502           \u251c\u2500\u2500 nginx.conf\u2502           \u2514\u2500\u2500 static\u2502               \u251c\u2500\u2500 images\u2502               \u2502   \u2514\u2500\u2500 logo.svg\u2502               \u2514\u2500\u2500 index.html\u251c\u2500\u2500 requirements.txt\u251c\u2500\u2500 settings.json\u2514\u2500\u2500 tests    \u251c\u2500\u2500 __init__.py    \u2514\u2500\u2500 test_example.py"},{"location":"#build-platform_1","title":"Build platform","text":"<p>Inside <code>myproject</code> run</p> opendataframework build"},{"location":"#start-platform_1","title":"Start platform","text":"<p>Inside <code>myproject</code> run</p> opendataframework start"},{"location":"#check-status","title":"Check status","text":"<p>Inside <code>myproject</code> run</p> opendataframework statusNAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTSmyproject_nginx     myproject:nginx     \"/docker-entrypoint.\u2026\"   myproject_nginx     28 seconds ago      Up 26 seconds       80/tcp, 0.0.0.0:80-&gt;8080/tcpmyproject_wines     myproject:wines     \"uvicorn app.main:ap\u2026\"   myproject_wines     30 seconds ago      Up 28 seconds       0.0.0.0:8000-&gt;8000/tcp <p>myproject_nginx</p> <p>Simple Frontend Server, serves list of urls registred in <code>myproject</code></p> <p></p> <p>myproject_wines</p> <p>Swagger UI with endpoints</p> <p></p>"},{"location":"#make-predictions","title":"Make predictions","text":"<p>Lets make a prediction via API</p> curl -X 'POST' \\   'http://localhost:8000/api/v1/inference/' \\   -H 'accept: application/json' \\   -H 'Content-Type: application/json' \\   -d '{  \"fixed_acidity\": 7.1,  \"volatile_acidity\": 0.33,  \"citric_acid\": 0.18,  \"residual_sugar\": 6.3,  \"chlorides\": 0.094,  \"free_sulfur_dioxide\": 27,  \"total_sulfur_dioxide\": 166,  \"density\": 0.99474,  \"ph\": 2.9,  \"sulphates\": 0.49,  \"alcohol\": 9.5}' <p>Response: 5.591486165052446 (<code>quality</code> column prediction)</p>"}]}